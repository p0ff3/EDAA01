package sudokuSolver;

public class SudokuSolver {
	private int[][] board;
	private int i;

	public SudokuSolver(int[][] board) {
		this.board = board;

	}
	public void solve(){
		solve(new Point(0,0));
	}

	public static void main(String[] args) {
		SudokuGUI GUI = new SudokuGUI();
		int[][] test = { { 8, 3, 5, 4, 1, 6, 9, 2, 7 },
				{ 2, 9, 6, 8, 5, 7, 4, 3, 1 }, { 4, 1, 7, 2, 9, 3, 6, 5, 8 },
				{ 5, 6, 9, 0, 3, 4, 7, 8, 2 }, { 1, 0, 3, 0, 7, 0, 5, 4, 9 },
				{ 7, 4, 8, 5, 2, 9, 1, 6, 3 }, { 6, 5, 2, 7, 8, 1, 3, 9, 4 },
				{ 9, 8, 0, 3, 4, 0, 2, 7, 6 }, { 3, 7, 0, 9, 6, 2, 0, 1, 5 } };
		int[][] test1 = new int[9][9];
		System.out.println(test[1][0]);
		// for (int i = 1; i <= 9; i++) {
		// test1[0][i-1]=i;
		// }
		test1[3][8] = 2;
		test1[3][7] = 0;
		// test1[3][7] = 0;
		int i = 0;
		System.out.println(test1[0][2]);
		SudokuSolver sudoku = new SudokuSolver(test1);
		Point p = new Point(1, 0);
		System.out.println(sudoku.squareContains(p, 2));
		System.out.println((sudoku.rowContains(p, 2)));
		System.out.println(sudoku.columnContains(new Point(0, 3), 2));
		System.out.println(sudoku.isValid(p, 2));
		Point p2 = new Point(0, 0);
		Point p1 = sudoku.getSquare(p2);
		// test[1][1]= 1;
		System.out.println(p1.getX());
		System.out.println(sudoku.solve(new Point(0, 0)));
		System.out.println();
		System.out.println();
		for (int x = 0; x < 9; x++) {
			for (int y = 0; y < 9; y++)
				System.out.print(test1[x][y] + " ");
			System.out.println();
		}
	}

	/**
	 * Löser sudokut med rekursion
	 * 
	 * @param p
	 * @return
	 */
	public boolean solve(Point p) {
		System.out.println(i++);
		int row = p.getY();
		int col = (p.getX() + 1) % 9;
		if (col == 0) {
			row = p.getY() + 1;
		}
		if (board[p.getY()][p.getX()] == 0) {
			for (int i = 1; i <= 9; i++) {
				if (isValid(p, i)) {
					board[p.getY()][p.getX()] = i;
					if (row == 9) {
						return true;
					}
					if (solve(new Point(col, row))) {
						return true;
					}
				}
			}
			board[p.getY()][p.getX()] = 0;
			return false;
		} else if (isValid(p, board[p.getY()][p.getX()])) {
			System.out.println("Hej");
			if (row == 9) {
				return true;
			}
			return solve(new Point(col, row));
		}
		System.out.println("Derp");
		return false;
	}

	/**
	 * Kollar om raden innehåller talet value
	 * 
	 * @param p
	 * 
	 * @param value
	 * 
	 * @return
	 */
	private boolean rowContains(Point p, int value) {
		for (int i = 0; i < 9; i++) {
			if (i == p.getX())
				continue;
			if (board[p.getY()][i] == value) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Kollar om kolumnen innehåller värdet value
	 * 
	 * @param p
	 * @param value
	 * @return
	 */
	private boolean columnContains(Point p, int value) {
		for (int i = 0; i < 9; i++) {
			if (i == p.getY()) {
				continue;
			}
			if (board[i][p.getX()] == value) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Kollar om kvadraten som point P ligger i innehåller värdet value
	 * 
	 * @param p
	 * @param value
	 * @return
	 */
	private boolean squareContains(Point p, int value) {
		Point newP = getSquare(p);
		for (int i = newP.getY(); i < newP.getY() + 3; i++) {
			for (int j = newP.getX(); j < newP.getX() + 3; j++) {
				if (i == p.getY() && j == p.getX()) {
					continue;
				}
				if (board[i][j] == value) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Kollar om det är okej att lägga in talet value på platsen p
	 * 
	 * @param p
	 * @param value
	 * @return
	 */
	private boolean isValid(Point p, int value) {
		return !rowContains(p, value) && !columnContains(p, value)
				&& !squareContains(p, value);

	}

	private Point getSquare(Point p) {
		Point newP = new Point(0, 0);
		if (p.getX() >= 6) {
			newP.setX(6);
		} else if (p.getX() >= 3) {
			newP.setX(3);
		} else {
			newP.setX(0);
		}
		if (p.getY() >= 6) {
			newP.setY(6);
		} else if (p.getY() >= 3) {
			newP.setY(3);
		} else {
			newP.setY(0);
		}
		return newP;
	}

	private int getValue(int x, int y) {
		return board[x][y];
	}

	private void setValue(int x, int y, int value) {
		board[x][y] = value;
	}

}