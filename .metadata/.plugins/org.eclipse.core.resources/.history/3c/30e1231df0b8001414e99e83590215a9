package SudokuSolver;

public class SudokuSolver {
	int[][] board = new int[9][9];

	public SudokuSolver(int[][] i) {
		board = i;
		// Shit here later onnew Point(
	}

	public boolean solve(Point p) {
		if(board[p.getX()][p.getY()] == 0){
			for(int i = 1; i <= 9; i++){
				if(!isValid(i, p)){
					return false;
				}
				int newX = (p.getX() + 1 ) % 9;
				int newY = 0;
				if(newX == 0){
					newY = p.getY() + 1;
				}
				if(newY == 9){
					return true;
				}
				return solve(new Point(newX, newY));
			}
		}
		return false;
	}

	private boolean squareContains(int value, Point p1) {
		Point p = getSquare(p1);
		for(int i = p.getX(); i < p.getX()+3; i++){
			for(int j = p.getY(); j < p.getY()+3; j++){
				if(board[i][j] == value){
					return true;
				}
			}
		}
		return false;
	}
	
	private Point getSquare(Point p){
		Point newP = new Point(0,0);
		if(p.getX() >= 6){
			newP.setX(6);
		}
		else if(p.getX() >= 3){
			newP.setX(3);
		}
		else{
			newP.setX(0);
		}
		
		if(p.getY() >= 6){
			newP.setY(6);
		}
		else if(p.getY() >= 3){
			newP.setY(3);
		}
		else{
			newP.setY(0);
		}
		
		return newP;
	}

	private boolean rowContains(int value, Point p) {
		int x = p.getX();
		for (int j = 0; j < board[x].length; j++)
			if(board[x][j] == value){
				return true;
			}
		return false;
	}

	private boolean columnContains(int value, Point p) {
		for(int i : board[p.getX()]){
			if(i == value){
				return true;
			}
		}
		return false;
	}

	private boolean isValid(int value, Point p) {
		return !(squareContains(value, p) && columnContains(value, p) && rowContains(value, p));
	}

}