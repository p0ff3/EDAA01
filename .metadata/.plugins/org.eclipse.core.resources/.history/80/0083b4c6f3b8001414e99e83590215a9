package SudokuSolver;

public class SudokuSolver {
	int[][] board = new int[9][9];

	public SudokuSolver(int[][] i) {
		board = i;
		// Shit here later onnew Point(
	}

	public static void main(String[] args) {
		int[][] test = { { 8, 3, 5, 4, 1, 6, 9, 2, 7 },
				{ 2, 9, 6, 8, 5, 7, 4, 3, 1 }, { 4, 1, 7, 2, 9, 3, 6, 5, 8 },
				{ 5, 6, 9, 1, 3, 4, 7, 8, 2 }, { 1, 2, 3, 6, 7, 8, 5, 4, 9 },
				{ 7, 4, 8, 5, 2, 9, 1, 6, 3 }, { 6, 5, 2, 7, 8, 1, 3, 9, 4 },
				{ 9, 8, 1, 3, 4, 5, 2, 7, 6 }, { 3, 7, 4, 9, 6, 2, 8, 1, 5 } };
		
		SudokuSolver fak = new SudokuSolver(test)

	}

	/**
	 * Fortf. trasig.
	 * 
	 * @param p
	 * @return
	 */
	public boolean solve(Point p) {
		int newX = (p.getX() + 1) % 9;
		int newY = 0;
		if (newX == 0) {
			newY = p.getY() + 1;
		}
		boolean solved = false;
		if (board[p.getX()][p.getY()] == 0) {
			for (int i = 1; i <= 9; i++) {
				if (!isValid(i, p)) {
					continue;
				}
				board[p.getX()][p.getY()] = i;
				solved = solve(new Point(newX, newY));
				if (solved) {
					return true;
				}
			}
			board[p.getX()][p.getY()] = 0;
			return false;
		}
		return solve(new Point(newX, newY));

	}

	private boolean squareContains(int value, Point p1) {
		Point p = getSquare(p1);
		for (int i = p.getX(); i < p.getX() + 3; i++) {
			for (int j = p.getY(); j < p.getY() + 3; j++) {
				if (board[i][j] == value) {
					return true;
				}
			}
		}
		return false;
	}

	private Point getSquare(Point p) {
		Point newP = new Point(0, 0);
		if (p.getX() >= 6) {
			newP.setX(6);
		} else if (p.getX() >= 3) {
			newP.setX(3);
		} else {
			newP.setX(0);
		}

		if (p.getY() >= 6) {
			newP.setY(6);
		} else if (p.getY() >= 3) {
			newP.setY(3);
		} else {
			newP.setY(0);
		}

		return newP;
	}

	private boolean rowContains(int value, Point p) {
		int x = p.getX();
		for (int j = 0; j < board[x].length; j++)
			if (board[x][j] == value) {
				return true;
			}
		return false;
	}

	private boolean columnContains(int value, Point p) {
		for (int i : board[p.getX()]) {
			if (i == value) {
				return true;
			}
		}
		return false;
	}

	private boolean isValid(int value, Point p) {
		return !(squareContains(value, p) && columnContains(value, p) && rowContains(
				value, p));
	}

}